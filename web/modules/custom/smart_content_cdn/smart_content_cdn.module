<?php

/**
 * @file
 * Hook implementations for Smart CDN module.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for smart_content_decision_block().
 */
function smart_content_cdn_block_build_smart_content_decision_block_alter(&$build, $block) {
  // Renderer for adding cacheable dependencies.
  $renderer = \Drupal::service('renderer');

  // Decision storage object.
  $storage = $block->getDecisionStorage();

  // List of Smart Content CDN derivatives to add as cacheable dependencies.
  $derivatives = [
    'geo',
  ];

  // Check if Decision exists.
  if ($storage->hasDecision() && $storage->getDecision()->getSegmentSetStorage()->getPluginId() !== 'broken') {
    $decision = $storage->getDecision();

    if (!empty($decision)) {
      // Get attached library settings.
      $attached_settings = $decision->getAttachedSettings();

      // Check Decision segments.
      if (!empty($attached_settings['segments'])) {
        foreach ($attached_settings['segments'] as $segment) {
          $conditions = $segment['conditions']['group']['conditions'] ?? NULL;

          // Check segment conditions.
          if (!empty($conditions)) {
            foreach ($conditions as $key => $condition) {
              // Check if condition is a smart_cdn condition, if not skip.
              if (!str_contains($key, 'smart_cdn:') || empty($condition['settings']['value'])) {
                continue;
              }

              // Get derivation machine name.
              $derivative = str_replace('smart_cdn:', '', $key);

              if (in_array($derivative, $derivatives)) {
                // Add cacheable dependency using block build and derivative value.
                $renderer->addCacheableDependency($build, $condition['settings']['value']);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function smart_content_cdn_entity_view(&$build, EntityInterface $entity, $display, $view_mode) {
  // Check if entity is a node and has field_tags.
  if ($entity->getEntityTypeId() == 'node' && $entity->hasField('field_tags')) {
    // Get session interest tags.
    $session = \Drupal::request()->getSession();
    $session_tags = $session->get('interest');

    // Get tags field.
    $field_tags = $entity->get('field_tags')->getValue();
    if (!empty($field_tags)) {
      // Get array of tag tids.
      $tids = array_map(function($field_tag) {
        return $field_tag['target_id'] ?? NULL;
      }, $field_tags);

      // Filter out any empty elements.
      $tids = array_filter($tids);

      // If session interest tags are empty, set with current node tags.
      if (empty($session_tags)) {
        // Initialize tids to a count of 1.
        $session_tags = array_fill_keys($tids, 1);
      }
      else {
        // Loops through current node tags.
        foreach ($tids as $tid) {
          // If tag tid is in session interest tags, increment.
          if (!array_key_exists($tid, $session_tags)) {
            $session_tags[$tid]++;
          }
          // Otherwise, set to a count of 1.
          else {
            $session_tags[$tid] = 1;
          }
        }
      }

      // Save interest tags.
      $session->set('interest', $session_tags);
    }
  }
}
