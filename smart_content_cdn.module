<?php

/**
 * @file
 * Hook implementations for Smart CDN module.
 */

use Drupal\Core\Entity\EntityInterface;
use Pantheon\EI\HeaderData;

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter() for smart_content_decision_block().
 */
function smart_content_cdn_block_build_smart_content_decision_block_alter(&$build, $block) {
  // Renderer for adding cacheable dependencies.
  $renderer = \Drupal::service('renderer');

  // Decision storage object.
  $storage = $block->getDecisionStorage();

  // Check if Decision exists.
  if ($storage->hasDecision() && $storage->getDecision()->getSegmentSetStorage()->getPluginId() !== 'broken') {
    $decision = $storage->getDecision();

    if (!empty($decision)) {
      // Get attached library settings.
      $attached_settings = $decision->getAttachedSettings();

      // Check Decision segments.
      if (!empty($attached_settings['segments'])) {
        foreach ($attached_settings['segments'] as $segment) {
          $conditions = $segment['conditions']['group']['conditions'] ?? NULL;

          // Check segment conditions.
          if (!empty($conditions)) {
            foreach ($conditions as $key => $condition) {
              // Check if condition is a smart_cdn condition, if not skip.
              if (!str_contains($key, 'smart_cdn:') || empty($condition['settings']['value'])) {
                continue;
              }

              // Add cacheable dependency using block build and condition value.
              $renderer->addCacheableDependency($build, $condition['settings']['value']);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function smart_content_cdn_entity_view(&$build, EntityInterface $entity, $display, $view_mode) {
  $config = \Drupal::configFactory()->get('smart_content_cdn.config');

  // Assemble interest fields config key.
  $interest_fields_key_parts = ['interest_fields'];
  if (!empty($entity->getEntityTypeId())) {
    $interest_fields_key_parts[] = $entity->getEntityTypeId();
  }
  if (!empty($entity->bundle())) {
    $interest_fields_key_parts[] = $entity->bundle();
  }
  // Get interest fields for entity type and bundle from config.
  $interest_fields_key = implode('_', $interest_fields_key_parts);
  $interest_fields = $config->get($interest_fields_key);

  $interest_threshold = $config->get('interest_threshold');

  $view_modes = ['full', 'teaser'];
  if ($entity->getEntityTypeId() == 'node' && in_array($view_mode, $view_modes) && !empty($interest_fields)) {
    $js_settings = [
      'tags' => [],
    ];
    foreach ($interest_fields as $interest_field_name) {
      // Check that given interest field is checked.
      if (empty($interest_field_name)) {
        continue;
      }
      if ($entity->hasField($interest_field_name)) {
        // Get interest field.
        $interest_field = $entity->get($interest_field_name)->getValue();
        if (!empty($interest_field)) {
          // Get array of interest tids.
          $entity_tids = array_map(function ($interest_field) {
            return $interest_field['target_id'] ?? NULL;
          }, $interest_field);

          // Filter out any empty elements.
          $entity_tids = array_filter($entity_tids);

          // Settings to be passed to JS.
          $js_settings['tags'] = array_merge($js_settings['tags'], $entity_tids);
        }
      }
    }

    $js_settings['interest_threshold'] = $interest_threshold;

    // Attach libraries.
    $build['#attached']['library'][] = 'smart_content_cdn/interest_count';
    $build['#attached']['drupalSettings']['interest_count'] = $js_settings;

  }
}

/**
 * Implements hook_page_attachments().
 */
function smart_content_cdn_page_attachments(array &$attachments) {
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  // Get header data.
  $smart_content_cdn = new HeaderData();
  $p_obj = $smart_content_cdn->returnPersonalizationObject();

  // Add labels for interest terms to $p_obj.
  if (!empty($p_obj['Interest'])) {
    foreach ($p_obj['Interest'] as $tid) {
      // Load taxonomy term by tid.
      $term = $term_storage->load($tid);
      if (!empty($term)) {
        // Add label for taxonomy term.
        $p_obj['InterestLabels'][] = strtolower($term->label());
      }
    }
  }

  // Set pObj to pass into JavaScript.
  $js_settings['pObj'] = $p_obj;

  // Attach libraries.
  $attachments['#attached']['library'][] = 'smart_content_cdn/gtm_headers';
  $attachments['#attached']['drupalSettings']['gtmHeaders'] = $js_settings;
}

/**
 * Implements hook_ssr_evaluate_condition().
 */
function smart_content_cdn_ssr_evaluate_condition($condition_id, array $attach_settings) {
  $condition_evaluation = FALSE;
  $op = $attach_settings['op'] ?? 'AND';

  switch ($condition_id) {
    // Geo condition.
    case 'smart_cdn:geo_continent_code':
    case 'smart_cdn:geo_country_code':
    case 'smart_cdn:geo_country_name':
    case 'smart_cdn:geo_region':
    case 'smart_cdn:geo_city':
    case 'smart_cdn:geo_connection_type':
    case 'smart_cdn:geo_connection_speed':
      // Value from segment settings.
      $value = $attach_settings['value'] ?? NULL;
      // Value from the headings.
      $header_value = $attach_settings['smart_cdn']['value'] ?? NULL;

      if (!empty($value) && !empty($header_value) || $op === 'equal') {
        switch ($op) {
          // If the values equal each other.
          case 'equals':
            $condition_evaluation = $value === $header_value;
            break;

          // If the header value contains the value in settings.
          case 'contains':
            $condition_evaluation = strpos($header_value, $value) !== FALSE;
            break;

          // If the header value starts with the value in settings.
          case 'starts_with':
            $condition_evaluation = strpos($header_value, $value) === 0;
            break;

          // If the header value is empty.
          case 'empty':
            $condition_evaluation = empty($header_value);
            break;
        }
      }
      break;

    // Interest condition.
    case 'smart_cdn:interest':
      // Value from segment settings.
      $value = $attach_settings['value'] ?? NULL;
      // Array from the headings.
      $header_array = $attach_settings['smart_cdn']['value'] ?? NULL;

      if (!empty($value) && !empty($header_array)) {
        // Check if settings value is in header array.
        $condition_evaluation = in_array($value, $header_array);
      }
      break;
  }

  return $condition_evaluation;
}

/**
 * Implements hook_ssr_cache_tags().
 */
function smart_content_cdn_ssr_cache_tags(&$tags, $conditions) {
  // If geo condition exists, add geo cache tag.
  // TODO: Update the smart_cdn:geo condition tags to reflect the new Pantheon ones.
  if (in_array('smart_cdn:geo', $conditions)) {
    $tags[] = 'smart_content_cdn.geo';
  }
  // If interest condition exists, add interest cache tag.
  if (in_array('smart_cdn:interest', $conditions)) {
    $tags[] = 'smart_content_cdn.interest';
  }
}
